volumes:
  postgres_data:  # Define a named volume for database persistence
  grafana-storage:
  redis_data:

networks:
  elk:
    driver: bridge
services:
  app:
    restart: on-failure
    build: .
    healthcheck:
      test: ["CMD", "curl", "-f", "-X", "POST", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka1: 
         condition: service_healthy 
      kafka2:
         condition: service_healthy
      kafka3:
          condition: service_healthy
      
    environment:
      NODE_ENV: development
      ERROR_LOG_PATH:  "./logs/error.log"
      COMBINED_LOG_PATH: "./logs/combined.log"
      EXCEPTION_LOG_PATH: "./logs/exceptions.log"
      PORT: 3000
      MODE: server
      TOP_USER_FOLLOWERLIST: 5
    ports:
      - "3000:3000"
    networks:
      - elk
    command: npm run dev
    volumes:
      - .:/app/
      - /app/node_modules
  
  prometheus:
    image: prom/prometheus
    depends_on:
     - app
    networks:
      - elk 
    
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://app:3000/health || exit 1"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    volumes:
      - ./logger/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./logger/alert_rules.yml:/etc/prometheus/alert_rules.yml
    ports:
      - "9090:9090"
  
  redis:
    image: "redis:alpine"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 20s
      timeout: 5s
      retries: 5
    networks:
      - elk
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  assetconsumer:
    restart: on-failure
    build: .
    healthcheck:
      test: ["CMD-SHELL", "if [ $(( $(date +%s) - $(stat -c %Y /app/examples.txt) )) -gt 5000 ]; then exit 1; else exit 0; fi"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      app:
        condition: service_healthy
      #- kafka2
      #- kafka3
    environment:
      NODE_ENV: development
      MODE: consumer
      TOPIC: assetCreated
      GROUPID: assetConsumer
      CONSUMER_NAME: assetConsumer
    networks:
      - elk
    command: npm run dev
    volumes:
      - .:/app/
      - /app/node_modules
  
  followerconsumer:
    restart: on-failure
    build: .
    healthcheck:
      test: ["CMD-SHELL", "if [ $(( $(date +%s) - $(stat -c %Y /app/examples.txt) )) -gt 5000 ]; then exit 1; else exit 0; fi"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      app:
        condition: service_healthy
    networks:
      - elk
    environment:
      NODE_ENV: development
      MODE: consumer
      TOPIC: followerCreated
      GROUPID: followerConsumer
      CONSUMER_NAME: followerConsumer
    command: npm run dev
    volumes:
      - .:/app/
      - /app/node_modules

  postgres:
    image: postgres:14
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: abcd1234
      POSTGRES_DB: instagram
    networks:
      - elk
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persist data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql # init script for db setup
  pgbouncer:
    image: edoburu/pgbouncer:latest
    environment:
      DATABASE_URL: postgres://postgres:abcd1234@postgres:5432/instagram
    ports:
      - "6433:6432"
    depends_on:
      - postgres
    networks:
      - elk
    volumes:
      - ./pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
      - ./pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt


  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - elk
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka1:
    image: confluentinc/cp-kafka:latest
    #restart: on-failure
    healthcheck:
      test: ["CMD", "bash", "-c", "/usr/bin/kafka-broker-api-versions --bootstrap-server=kafka1:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - elk
    ports:
      #- "9092:9092"
      - "9093:9093"
      - 29092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,EXTERNAL://host.docker.internal:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      #KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      #KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      #KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
  kafka2:
    image: confluentinc/cp-kafka:latest
    healthcheck:
      test: ["CMD", "bash", "-c", "/usr/bin/kafka-broker-api-versions --bootstrap-server=kafka2:9095"]
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - "9094:9094"
      - "9095:9095"
    networks:
      - elk
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9094,EXTERNAL://host.docker.internal:9095
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9094,EXTERNAL://0.0.0.0:9095
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      #KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
  kafka3:
    image: confluentinc/cp-kafka:latest
    healthcheck:
      test: ["CMD", "bash", "-c", "/usr/bin/kafka-broker-api-versions --bootstrap-server=kafka3:9097"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - elk
    ports:
      - "9096:9096"
      - "9097:9097"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9096,EXTERNAL://host.docker.internal:9097
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9096,EXTERNAL://0.0.0.0:9097
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      #KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
  kafka-drop:
    image: obsidiandynamics/kafdrop
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2: 
        condition: service_healthy
      kafka3:
        condition: service_healthy
    networks:
      - elk
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "host.docker.internal:29092,host.docker.internal:9095,host.docker.internal:9097"
      #KAFKA_BROKERCONNECT: "host.docker.internal:29092"
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXTPATH: "/"